import React, { Component } from 'react'
import PropTypes from 'prop-types'
import ReactDOM from 'react-dom'
import { createStore } from 'redux'
import { Provider, connect } from 'react-redux'

/**
 * 这个页面是利用 connent 和 provider 进行组件间传值
 */ 

 /* 定义页面中展示的组件 */
// React component
class Counter extends Component {
  render() {
    console.log(this.props)
    const { value, onIncreaseClick, down } = this.props
    return (
      <div>
        <span>{value}</span>
        <button onClick={onIncreaseClick}>Increase</button>
        <button onClick={down}>减少</button>
      </div>
    )
  }
}

/* 规定组件传参的类型 */
Counter.propTypes = {
  value: PropTypes.number.isRequired,
  onIncreaseClick: PropTypes.func.isRequired
}

/* 定义触发某个事件所派发的值 */
// Action
const increaseAction = { type: 'increase' }
const down = { type: 'down' }

/* 定义接收到派发值后的处理流程 */
// Reducer
function counter(state = { count: 0 }, action) {
  const count = state.count
  switch (action.type) {
    case 'increase':
      return { count: state.count + 1 }
    case 'down' :
      return { count: state.count - 1 }
    default:
      return state
  }
}

/* 初始化状态 */
// Store
const store = createStore(counter)

/* 这个是返回给 ui 层的值,也就是 state 中的值 */
// Map Redux state to component props
function mapStateToProps(state) {
  return {
    value: state.count
  }
}

/* 这个是设置触发某个事件后,派发的函数 */
// Map Redux actions to component props
function mapDispatchToProps(dispatch) {
  return {
    onIncreaseClick: () => dispatch(increaseAction),
    down: () => dispatch(down)
  }
}

/* 这个是需要导出的模块,利用 connect 将 state 和处理事件作为参数传给组件 */
// Connected Component
const App = connect(
  mapStateToProps,
  mapDispatchToProps
)(Counter)

/* 这个是将组件挂载到页面中, Provider 将 store 传给组件,而不是组件间层层传递 */
ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
)